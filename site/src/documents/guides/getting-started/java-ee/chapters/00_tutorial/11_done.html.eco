---
title: 'You made it!'
shortTitle: 'Done!'
category: 'Tutorial'
---

<div class="row">
  <div class="col-md-12">
    <p>
      Congratulations, you have now successfully deployed your Java EE Process Application!
    </p>
    <h3>Where to go from here?</h3>
    <ul>
      <li>
        <a href="<%= @docUrl('bpmn/tutorial.html') %>">Learn more about BPMN</a>
      </li>
      <li>
        <a href="http://docs.camunda.org/api-references/bpmn20/">Explore the BPMN 2.0 Implementation Reference</a>
      </li>
      <li>
        <a href="https://twitter.com/share" class="twitter-share-button" data-url="http://camunda.org/get-started/"
           data-text="Whohoo! I just developed a Jave EE #BPMN Process Application." data-size="large" data-hashtags="camunda">Tweet</a>
      </li>
    </ul>
  </div>
</div>

<div class="bootstrap-code">
  <script type="text/xml" id="pom.xml">
    <?xml version="1.0" encoding="UTF-8"?>
    <project xmlns="http://maven.apache.org/POM/4.0.0"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
      <modelVersion>4.0.0</modelVersion>

      <groupId>org.camunda.bpm.getstarted</groupId>
      <artifactId>pizza-order</artifactId>
      <version>0.1.0-SNAPSHOT</version>
      <packaging>war</packaging>

      <dependencies>

        <!-- camunda engine dependency -->
        <dependency>
          <groupId>org.camunda.bpm</groupId>
          <artifactId>camunda-engine</artifactId>
          <version>7.1.0-Final</version>
          <scope>provided</scope>
        </dependency>

        <!-- camunda cdi beans -->
        <dependency>
          <groupId>org.camunda.bpm</groupId>
          <artifactId>camunda-engine-cdi</artifactId>
          <version>7.1.0-Final</version>
        </dependency>

        <!-- provides a default EjbProcessApplication -->
        <dependency>
          <groupId>org.camunda.bpm.javaee</groupId>
          <artifactId>camunda-ejb-client</artifactId>
          <version>7.1.0-Final</version>
        </dependency>

        <!-- Java EE 6 Specification -->
        <dependency>
          <groupId>org.jboss.spec</groupId>
          <artifactId>jboss-javaee-web-6.0</artifactId>
          <version>3.0.2.Final</version>
          <type>pom</type>
          <scope>provided</scope>
          <exclusions>
            <exclusion>
              <artifactId>xalan</artifactId>
              <groupId>xalan</groupId>
            </exclusion>
          </exclusions>
        </dependency>

      </dependencies>

      <build>
        <finalName>pizza-order</finalName>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-war-plugin</artifactId>
            <version>2.3</version>
            <configuration>
              <failOnMissingWebXml>false</failOnMissingWebXml>
            </configuration>
          </plugin>
        </plugins>
      </build>

    </project>
  </script>

  <script type="text/xml" id="LoanApprovalApplication">
    package org.camunda.bpm.example.loanapproval;

    import org.camunda.bpm.application.ProcessApplication;
    import org.camunda.bpm.application.impl.ServletProcessApplication;

    @ProcessApplication("Loan Approval App")
    public class LoanApprovalApplication extends ServletProcessApplication {
      // empty implementation
    }
  </script>

  <script type="text/xml" id="LoanApprovalEjbApplication">
    @ProcessApplication("Loan Approval App")
    @Singleton
    @Startup
    @ConcurrencyManagement(ConcurrencyManagementType.BEAN)
    @TransactionAttribute(TransactionAttributeType.REQUIRED)
    @Local(ProcessApplicationInterface.class)
    public class LoanApprovalEjbApplication extends EjbProcessApplication {

      @PostConstruct
      public void start() {
        deploy();
      }

      @PreDestroy
      public void stop() {
        undeploy();
      }
    }
  </script>

  <script type="text/xml" id="faces-config.xml">
    <?xml version="1.0" encoding='UTF-8'?>
    <faces-config version="2.0" xmlns="http://java.sun.com/xml/ns/javaee"
                  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                  xsi:schemaLocation="http://java.sun.com/xml/ns/javaee
             http://java.sun.com/xml/ns/javaee/web-facesconfig_2_0.xsd">

    </faces-config>
  </script>


  <script type="text/xml" id="persistence.xml">
    <?xml version="1.0" encoding="UTF-8"?>
    <persistence version="2.0"
      xmlns="http://java.sun.com/xml/ns/persistence" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="
            http://java.sun.com/xml/ns/persistence
            http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd">

      <persistence-unit name="primary">
        <jta-data-source>java:jboss/datasources/ProcessEngine</jta-data-source>
        <properties>
          <!-- Properties for Hibernate -->
          <property name="hibernate.hbm2ddl.auto" value="create-drop" />
          <property name="hibernate.show_sql" value="true" />
        </properties>
      </persistence-unit>

    </persistence>
  </script>

  <script type="text/xml" id="processes.xml">
    <process-application
      xmlns="http://www.camunda.org/schema/1.0/ProcessApplication"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

      <process-archive name="pizza-order">
        <process-engine>default</process-engine>
        <properties>
          <property name="isDeleteUponUndeploy">true</property>
          <property name="isScanForProcessDefinitions">true</property>
        </properties>
      </process-archive>

    </process-application>
  </script>

  <script type="text/xml" id="placeorder.xhtml">
    <!DOCTYPE HTML>
    <html lang="en" xmlns="http://www.w3.org/1999/xhtml"
      xmlns:ui="http://java.sun.com/jsf/facelets"
      xmlns:h="http://java.sun.com/jsf/html"
      xmlns:f="http://java.sun.com/jsf/core">

    <f:view>
      <f:metadata>
        <!-- Start a new process instance. Process Definition Key is read internally from
             request parameters and cached in the CDI conversation scope.
        -->
        <f:event type="preRenderView" listener="#{camundaTaskForm.startProcessInstanceByKeyForm()}" />
      </f:metadata>
      <h:head>
        <title>Place Order</title>
      </h:head>
      <h:body>
        <h1>Select your pizza</h1>
        <h:form id="submitForm">
          <h:panelGrid columns="2">
            <p>
              <label for="pizza">Pizza</label>
              <h:selectOneMenu id="pizza" value="#{processVariables['pizza']}">
                  <f:selectItem itemValue="Margarita" itemLabel="Margarita"/>
                  <f:selectItem itemValue="Salami" itemLabel="Salami"/>
                  <f:selectItem itemValue="Tonno" itemLabel="Tonno"/>
                  <f:selectItem itemValue="Prosciutto" itemLabel="Prosciutto"/>
              </h:selectOneMenu>
            </p>
            <p>
              <label for="customer">Customer</label>
              <!-- create process variables using the processVariables map. -->
              <h:inputText id="customer" value="#{processVariables['customer']}" required="true" />
            </p>
            <p>
              <label for="address">Address</label>
              <!-- create process variables using the processVariables map. -->
              <h:inputText id="address" value="#{processVariables['address']}" required="true" />
            </p>
          </h:panelGrid>

          <!-- The button starts a new process instance. This ends the conversation and redirects us to the tasklist.

               NOTE: Syntax is different when working on user task forms, see file "approveLoanRequest.xhtml".
          -->
          <h:commandButton id="submit_button" value="Order Pizza" action="#{camundaTaskForm.completeProcessInstanceForm()}" />

          <h:messages style="color:red;margin:8px;" />
        </h:form>
      </h:body>
    </f:view>
    </html>
  </script>

  <script type="text/html" id="OrderEntity">
    package org.camunda.bpm.getstarted.pizza;

    import javax.persistence.Entity;
    import javax.persistence.GeneratedValue;
    import javax.persistence.Id;
    import javax.persistence.Version;
    import java.io.Serializable;

    @Entity
    public class OrderEntity implements Serializable {

      private static  final long serialVersionUID = 1L;

      @Id
      @GeneratedValue
      protected Long id;

      @Version
      protected long version;

      protected String customer;
      protected String address;
      protected String pizza;
      protected boolean approved;

      public Long getId() {
        return id;
      }

      public void setId(Long id) {
        this.id = id;
      }

      public long getVersion() {
        return version;
      }

      public void setVersion(long version) {
        this.version = version;
      }

      public String getCustomer() {
        return customer;
      }

      public void setCustomer(String customer) {
        this.customer = customer;
      }

      public String getAddress() {
        return address;
      }

      public void setAddress(String address) {
        this.address = address;
      }

      public String getPizza() {
        return pizza;
      }

      public void setPizza(String pizza) {
        this.pizza = pizza;
      }

      public boolean isApproved() {
        return approved;
      }

      public void setApproved(boolean approved) {
        this.approved = approved;
      }
    }
  </script>


  <script type="text/html" id="OrderBusinessLogic">
    package org.camunda.bpm.getstarted.pizza;

    import org.camunda.bpm.engine.delegate.DelegateExecution;

    import javax.ejb.Stateless;
    import javax.inject.Named;
    import javax.persistence.EntityManager;
    import javax.persistence.PersistenceContext;
    import java.util.Map;

    @Stateless
    @Named
    public class OrderBusinessLogic {

      // Inject the entity manager
      @PersistenceContext
      private EntityManager entityManager;

      public void persistOrder(DelegateExecution delegateExecution) {
        // Create new order instance
        OrderEntity orderEntity = new OrderEntity();

        // Get all process variables
        Map<String, Object> variables = delegateExecution.getVariables();

        // Set order attributes
        orderEntity.setCustomer((String) variables.get("customer"));
        orderEntity.setAddress((String) variables.get("address"));
        orderEntity.setPizza((String) variables.get("pizza"));

        /*
          Persist order instance and flush. After the flush the
          id of the order instance is set.
        */
        entityManager.persist(orderEntity);
        entityManager.flush();

        // Remove no longer needed process variables
        delegateExecution.removeVariables(variables.keySet());

        // Add newly created order id as process variable
        delegateExecution.setVariable("orderId", orderEntity.getId());
      }

    }
  </script>

  <script type="text/html" id="OrderBusinessLogic2">
    @Stateless
    @Named
    public class OrderBusinessLogic {

      // ...

      // Inject task form available through the camunda cdi artifact
      @Inject
      private TaskForm taskForm;

      public void persistOrder(DelegateExecution delegateExecution) {
        // ...
      }

      public OrderEntity getOrder(Long orderId) {
        // Load order entity from database
        return entityManager.find(OrderEntity.class, orderId);
      }

      /*
        Merge updated order entity and complete task form in one transaction. This ensures
        that both changes will rollback if an error occurs during transaction.
       */
      public void mergeOrderAndCompleteTask(OrderEntity orderEntity) {
        // Merge detached order entity with current persisted state
        entityManager.merge(orderEntity);
        try {
          // Complete user task from
          taskForm.completeTask();
        } catch (IOException e) {
          // Rollback both transactions on error
          throw new RuntimeException("Cannot complete task", e);
        }
      }

    }
  </script>

  <script type="text/html" id="ApproveOrderController">
    package org.camunda.bpm.getstarted.pizza;

    import org.camunda.bpm.engine.cdi.BusinessProcess;
    import org.camunda.bpm.engine.cdi.jsf.TaskForm;

    import javax.enterprise.context.ConversationScoped;
    import javax.inject.Inject;
    import javax.inject.Named;
    import javax.persistence.EntityManager;
    import javax.persistence.PersistenceContext;
    import java.io.IOException;
    import java.io.Serializable;

    @Named
    @ConversationScoped
    public class ApproveOrderController implements Serializable {

      private static  final long serialVersionUID = 1L;

      // Inject the BusinessProcess to access the process variables
      @Inject
      private BusinessProcess businessProcess;

      // Inject the EntityManager to access the persisted order
      @PersistenceContext
      private EntityManager entityManager;

      // Inject the OrderBusinessLogic to update the persisted order
      @Inject
      private OrderBusinessLogic orderBusinessLogic;

      // Caches the OrderEntity during the conversation
      private OrderEntity orderEntity;

      public OrderEntity getOrderEntity() {
        if (orderEntity == null) {
          // Load the order entity from the database if not already cached
          orderEntity = orderBusinessLogic.getOrder((Long) businessProcess.getVariable("orderId"));
        }
        return orderEntity;
      }

      public void submitForm() throws IOException {
        // Persist updated order entity and complete task form
        orderBusinessLogic.mergeOrderAndCompleteTask(orderEntity);
      }
    }
  </script>

  <script type="text/html" id="approveorder.xhtml">
    <!DOCTYPE HTML>
    <html lang="en" xmlns="http://www.w3.org/1999/xhtml"
    xmlns:ui="http://java.sun.com/jsf/facelets"
    xmlns:h="http://java.sun.com/jsf/html"
    xmlns:f="http://java.sun.com/jsf/core">

    <f:view>
    <f:metadata>
      <!-- Start working on a task. Task Id is read internally from
           request parameters and cached in the CDI conversation scope.
      -->

      <f:event type="preRenderView" listener="#{camundaTaskForm.startTaskForm()}" />
    </f:metadata>
    <h:head>
      <title>Approve Order</title>
    </h:head>
    <h:body>
      <h1>Order:</h1>
      <p>Customer: #{approveOrderController.orderEntity.customer}</p>
      <p>Address: #{approveOrderController.orderEntity.address}</p>
      <p>Pizza: #{approveOrderController.orderEntity.pizza}</p>
      <h:form id="submitForm">
        <h:outputLabel>Approve Order?</h:outputLabel>
        <h:selectBooleanCheckbox value="#{approveOrderController.orderEntity.approved}"/><br/>
        <h:commandButton id="submit_button" value="Approve Order" action="#{approveOrderController.submitForm()}" />
      </h:form>
    </h:body>
    </f:view>
    </html>
  </script>

  <script type="text/html" id="preparepizza.xhtml">
    <!DOCTYPE HTML>
    <html lang="en" xmlns="http://www.w3.org/1999/xhtml"
      xmlns:ui="http://java.sun.com/jsf/facelets"
      xmlns:h="http://java.sun.com/jsf/html"
      xmlns:f="http://java.sun.com/jsf/core">

    <f:view>
      <f:metadata>
        <!-- Start working on a task. Task Id is read internally from
             request parameters and cached in the CDI conversation scope.
        -->

        <f:event type="preRenderView" listener="#{camundaTaskForm.startTaskForm()}" />
      </f:metadata>
      <h:head>
        <title>Prepare Pizza</title>
      </h:head>
      <h:body>
        <h1>Please prepare pizza</h1>
        <h:form id="submitForm">
          <h:commandButton id="submit_button" value="Done" action="#{camundaTaskForm.completeTask()}" />
        </h:form>
      </h:body>
    </f:view>
    </html>
  </script>

  <script type="text/html" id="OrderBusinessLogic3">
    @Stateless
    @Named
    public class OrderBusinessLogic {

      // ..

      private static Logger LOGGER = Logger.getLogger(OrderBusinessLogic.class.getName());

      public void persistOrder(DelegateExecution delegateExecution) {
        // ...
      }

      public OrderEntity getOrder(Long orderId) {
        // ...
      }

      public void mergeOrderAndCompleteTask(OrderEntity orderEntity) {
        // ...
      }

      public void rejectOrder(DelegateExecution delegateExecution) {
        OrderEntity order = getOrder((Long) delegateExecution.getVariable("orderId"));
        LOGGER.log(Level.INFO, "\n\n\nSending Email:\nDear {0}, your order {1} of a {2} pizza has been rejected.\n\n\n", new String[]{order.getCustomer(), String.valueOf(order.getId()), order.getPizza()});
      }

    }
  </script>


  <script type="text/ng-template" id="code-annotations">
    {
    "pom.xml":
    { "war": "Process Applications are most commonly packaged as Java Web Applications (WAR files). Other deployment options are available. On the Java EE 6 platform, you can use plain JAR or advanced EAR deployments as well." ,
    "camunda-engine": "The process engine is the component responsible for picking up your BPMN 2.0 processes and executing them.",
    "javax.servlet-api": "The servlet API is required for compilation",
    "false" : "With Servlet 3.0 we do not need a web.xml file. Maven needs to catch up.",
    "camunda-bpm-nexus" : "camunda nexus providing the Maven artifacts."

    },
    "processes.xml":
    {
    "loan-approval": "The name of the process engine deployment to be constructed.",
    "default": "The name of the process engine we want to use (you can start multiple process engines).",
    "isDeleteUponUndeploy": "Controls whether the process engine deployment should be removed when the process application is undeployed. If set to true, all process instances are deleted in the database when the WAR file is removed from the server.",
    "isScanForProcessDefinitions": "If set to true, the WAR file is automatically scanned for process definitions. All files ending in <code>.bpmn20.xml</code> or <code>.bpm</code> are automatically picked up."
    }
    }
  </script>
</div>

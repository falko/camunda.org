---
title: 'Add Approve Order Task Form'
category: 'Tutorial'
---

<div class="row">
  <div class="col-xs-6 col-sm-6 col-md-3">
    <img id="task-form" data-img-thumb src="<%= @docUrl('assets/img/get-started/javaee/approve-order.png') %>" />
  </div>
  <div class="col-xs-6 col-sm-6 col-md-9">
    <p>
      After the order was persisted an user can approve the order. Therefore a task form is needed
      to display the order information.
    </p>
  </div>
</div>

<h3>Add a Cdi Bean to the Process Application</h3>
<p>
  To update the persisted entity we use a named Cdi Bean <code>ApproveOrderController</code>.
  To gather the persisted order entity we get the order id from the process variables of
  the <code>businessProcess</code>. With the id we can load the order entity trough the
  order business logic. After the order was updated the detached entity state is merged
  by the order business logic.
</p>

<div class="app-source" data-source-code="ApproveOrderController" annotate="code-annotations"></div>

<h3>Extend Order Business Logic</h3>
<p>
  The order business logic is extended to provide a method to load an order entity from
  the database by order id and to merge a detached order entity and complete the task form.
  Therefore the task form is injected which is provided by the camunda Cdi artifact.
</p>
<p>
  Please note that the merge of the detached order entity and the completion of the task form
  are intentionally placed in one method. This ensures that both operations are executed
  in a single transaction. An error during the transaction will rollback both changes.
</p>

<div class="app-source" data-source-code="OrderBusinessLogic2" annotate="code-annotations"></div>

<h3>Add a Task Form</h3>
<p>
  Back to eclipse, add a file named <code>approveorder.xhtml</code> to the <code>src/main/webapp</code> folder.
  Add the following content:
</p>

<div class="app-source" data-source-code="approveorder.xhtml" annotate="code-annotations"></div>

<p>
  The JSF view displays the order properties and provides a checkbox to approve the order on
  submit. Additionally an event listener is configured which is triggered before the view will
  be rendered. It will call the <code>camundaTaskForm.startTaskForm()</code> method which extracts
  the task id from the URL and starts a conversation for the task form.
</p>
<p>
<p>
  If the user approves respectively disapproves the order it is directly set on the cached
  order entity.
</p>
<p>
  On form submit the <code>approveOrderController.submitForm()</code> method calls the EJB
  <code>mergeOrderAndCompleteTask</code> method with the cached order entity. The EJB
  will merge the updated order entity if necessary and completes the task form.
</p>

<h3>Configure the Task Form in the Process</h3>
<div class="row">
  <div class="col-xs-6 col-sm-6 col-md-3">
    <img id="pizza-order-task-form" data-img-thumb src="<%= @docUrl('assets/img/get-started/javaee/pizza-order-process-task-form.png') %>" />
  </div>
  <div class="col-xs-9 col-sm-9 col-md-9">
    <p>
      Open the process with the modeler plugin. Click on the approve order user task.
      In the properties view, set the <code>Form Key</code> property to <code>app:approveorder.jsf</code>.
      This means that we want to use an external JSF form and that the form is loaded from the <code>app</code>lication.
    </p>
  </div>
</div>

<h3>Configure the Conditional Sequence Flows in the Process</h3>
<div class="row">
  <div class="col-xs-6 col-sm-6 col-md-3">
    <img id="conditional-sequence-flow-yes" data-img-thumb src="<%= @docUrl('assets/img/get-started/javaee/pizza-order-yes.png') %>" />
    <img id="conditional-sequence-flow-no" data-img-thumb src="<%= @docUrl('assets/img/get-started/javaee/pizza-order-no.png') %>" />
  </div>
  <div class="col-xs-9 col-sm-9 col-md-9">
    <p>
      Open the process with the modeler plugin. In the properties view, set the
      <code>Condition</code> property of the conditional sequence flows after the exclusive gateway
      to <code>${orderBusinessLogic.getOrder(orderId).approved}</code> respectively
      <code>${not orderBusinessLogic.getOrder(orderId).approved}</code>.
    </p>
    <p>
      When you are done, save all resources and perform a Maven build and redeploy the process application.
      You can now approve the pizza order from the tasklist.
    </p>
  </div>
</div>

<%- @partial('get-tag.html.eco', @, {repo: "camunda-get-started-javaee", tag: "Step-6"}) %>

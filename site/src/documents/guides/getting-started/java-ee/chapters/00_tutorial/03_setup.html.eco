---
title: 'Setup your project'
category: 'Tutorial'
---

<p>
  Now you are ready for setting up your Java EE process application project in eclipse. Setting up a process application project consists of 6 steps:
</p>
<ol>
  <li><a href="#setup/eclipse">Create a new Maven Project in Eclipse</a></li>
  <li><a href="#setup/maven">Add the Maven dependencies</a></li>
  <li><a href="#setup/beans.xml">Add a WEB-INF/beans.xml deployment descriptor</a></li>
  <li><a href="#setup/faces-config.xml">Add a WEB-INF/faces-config.xml deployment descriptor</a></li>
  <li><a href="#setup/persistence.xml">Add a META-INF/persistence.xml deployment descriptor</a></li>
  <li><a href="#setup/processes.xml">Add a META-INF/processes.xml deployment descriptor</a></li>
</ol>
<p>
  In the following, we go through this process step by step.
</p>

<section id="setup/eclipse">
  <h3>Create a new Maven Project in Eclipse</h3>
  <div class="row">
    <div class="col-xs-6 col-sm-6 col-md-3">
      <img id="maven-project-settings" data-img-thumb src="<%= @docUrl('assets/img/get-started/javaee/maven-project-settings.png') %>" />
    </div>
    <div class="col-xs-9 col-sm-9 col-md-9">
      <p>
        In eclipse, go to <code>File / New / Other ...</code>. This opens the <em>New Project Wizard</em>. In the
        <em>New Project Wizard</em> select <code>Maven / Maven Project</code>. Click Next.
      </p>
      <p>
        On the first page of the <em>New Maven Project Wizard</em> select &quot;<em>Create a simple project
        (skip archetype selection)</em>&quot;. Click Next.
      </p>
      <p>
        On the second page (see screenshot), configure the Maven coordinates for the project.
      </p>
      <p class="alert alert-warning">
        Since we are setting up a WAR Project, make sure to select <code>Packaging: war</code>.
      </p>
      <p>
        When you are done, click Finish. Eclipse sets up a new Maven project. The project appears in the
        <em>Project Explorer</em> View.
      </p>
    </div>
  </div>
</section>

<section id="setup/maven">
  <h3>Add Maven Dependencies</h3>
  <p>
    The next step consists in setting up the Maven dependencies for your new process application.
    Add the following dependencies to the <code>pom.xml</code> file of your project:
  </p>

  <div class="app-source" data-source-code="pom.xml" annotate="code-annotations" ></div>

  <p>
    As dependencies you need the camunda engine and camunda engine Cdi package. The Cdi package
    provide you beans to easily interact with process engine. And the ability to resolve
    Cdi beans from inside the BPMN process XML.
  </p>
  <p>
    Also we use the camunda ejb client to interact with the process engine which provides
    a default implementation of the <code>EjbProcessApplication</code>. This dependency is not needed if you
    want to implement your own <code>EjbProcessApplication</code>.
  </p>
  <p>
    The JBoss JavaEE spec dependency helps us to develop the application. It is only needed
    during development so the <code>scope</code> is set to provided. The JBoss AS already contains this
    interfaces.
  </p>

  <p>
    Now you can perform the first build. Select the <code>pom.xml</code> in the Package Explorer, perform a Right
    Click and select <code>Run AS / Maven Install</code>
  </p>

  <%- @partial('get-tag.html.eco', @, {repo: "camunda-get-started-javaee", tag: "Step-1"}) %>
</section>

<section id="setup/beans.xml">
  <h3>Add a WEB-INF/beans.xml deployment descriptor</h3>
  <p>
    After we have all our maven dependencies configured we can add our first deployment descriptor. The
    <code>WEB-INF/beans.xml</code> is used to configure a Cdi application. It is always needed to
    be present but can be empty like in our case. For further informations please see this
    <a href="http://www.cdi-spec.org/faq/">explanation</a>.
  </p>

  <p class="alert alert-info">
    This file needs to be added to the <code>src/main/webapp/WEB-INF</code> folder of the Maven project.
  </p>
</section>

<section id="setup/faces-config.xml">
  <h3>Add a WEB-INF/faces-config.xml deployment descriptor</h3>
  <p>
    The next step is to configure the JSF component. This is done by adding the <code>WEB-INF/faces-config.xml</code>
    to your project. We use the default configuration so you only have to add the file without any
    additional configuration.
  </p>

  <p class="alert alert-info">
    This file needs to be added to the <code>src/main/webapp/WEB-INF</code> folder of the Maven project.
  </p>

  <div class="app-source" data-source-code="faces-config.xml" annotate="code-annotations" ></div>
</section>

<section id="setup/persistence.xml">
  <h3>Add a META-INF/persistence.xml deployment descriptor</h3>
  <p>
    To configure JPA we add the <code>META-INF/persistence.xml</code> file. We use the same data source
    as the process engine which is configured inside the <code>standalone.xml</code> of the JBoss
    distribution.
  </p>
  <p>
    We additionally configure the H2 database to drop the database schema on redeployment and to log
    SQL queries. This configuration is useful during the development.
  </p>

  <p class="alert alert-info">
    This file needs to be added to the <code>src/main/resources/META-INF</code> folder of the Maven project.
  </p>

  <div class="app-source" data-source-code="persistence.xml" annotate="code-annotations" ></div>
</section>

<section id="setup/processes.xml">
  <h3>Add a META-INF/processes.xml deployment descriptor</h3>
  <p>
    The last step for setting up the process application is adding the <code>META-INF/processes.xml</code>
    deployment descriptor file. This file allows us to provide a declarative configuration of the
    deployment(s) this process application makes to the process engine.
  </p>

  <p class="alert alert-info">
    This file needs to be added to the <code>src/main/resources/META-INF</code> folder of the Maven project.
  </p>

  <div class="app-source" data-source-code="processes.xml" annotate="code-annotations" ></div>

  <div class="panel-group" id="accProcessesXml">
    <div class="panel panel-default">
      <div class="panel-heading">
        <a class="accordion-toggle collapsed" data-toggle="collapse" data-parent="#accProcessesXml" href="#accProcessesXmlCollapsed">
          <i class="glyphicon glyphicon-thumbs-up"></i>
          Empty META-INF/processes.xml
        </a>
      </div>
      <div id="accProcessesXmlCollapsed" class="panel-collapse collapse">
        <div class="panel-body">
          <p>You can leave the META-INF/processes.xml file empty. In that case, default values are used.</p>
        </div>
      </div>
    </div>
  </div>

  <p>
    At this point you have successfully setup the process application you can start modeling your process.
  </p>

  <%- @partial('get-tag.html.eco', @, {repo: "camunda-get-started-javaee", tag: "Step-2"}) %>
</section>

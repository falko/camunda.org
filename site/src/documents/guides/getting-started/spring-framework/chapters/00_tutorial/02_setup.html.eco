---
title: 'Setup your Project'
category: 'Tutorial'
---

<p>
  We will start with setting up a Spring Web application as Apache Maven Project inside Eclipse. This consists of four
  steps:
</p>
<ol>
  <li><a href="#setup/eclipse">Create a new Maven Project in Eclipse</a></li>
  <li><a href="#setup/maven">Add the camunda &amp; Spring framework dependencies</a></li>
  <li><a href="#setup/web.xml">Add web.xml file for bootstrapping the Spring container</a></li>
  <li><a href="#setup/application-context">Add a Spring application context XML configuration file</a></li>
</ol>
<p>
In the following, we go through this process step by step.
</p>

<section id="setup/eclipse">
  <h3>Create a new Maven Project in Eclipse</h3>
  <div class="row">
    <div class="col-xs-6 col-sm-6 col-md-3">
      <img class="thumbnail" data-img-thumb src="<%= @docUrl('assets/img/get-started/spring-framework/eclipse-new-project.png') %>" />
    </div>
    <div class="col-xs-9 col-sm-9 col-md-9">
      <p>
        First, we set up a new Apache Maven based project in eclipse. Let's call it <em>loanapproval-spring</em>. The
        screenshot on the left illustrates the settings we choose. Since we deploy a Web application, make sure to
        select <code>Packaging: war</code>.
      </p>
      <p class="alert">
        If you are unfamiliar with setting up a Maven project, read the <em>Setup your Project</em> Section in the
        <a href="<%= @docUrl('get-started/developing-process-applications.html') %>">Getting started developing process
          applications</a> tutorial.
      </p>
      <p>
        When you are done, click Finish. Eclipse sets up a new Maven project. The project appears in the <em>Project
        Explorer</em> View.
      </p>
    </div>
  </div>
</section>

<section id="setup/maven">
  <h3>Add camunda BPM &amp; Spring Framework dependencies</h3>
  <div class="row">
    <div class="col-md-12">
      <p>
        The next step consists in setting up the Maven dependencies for the new project. Maven dependencies need to be
        added to the <code>pom.xml</code> file of the project. We add both camunda BPM and Spring Framework dependencies:
      </p>

      <div class="app-source" data-source-code="pom.xml" annotate="code-annotations" ></div>
    </div>
  </div>
</section>

<section id="setup/web.xml">
  <h3>Add web.xml file for bootstrapping the Spring container</h3>
  <div class="row">
    <div class="col-md-12">
      <p>
        Next, we add a <code>web.xml</code> file for bootstrapping the spring container. In order to do so, first add a
        folder named <code>WEB-INF</code> to the (already existing) <code>src/main/webapp</code> folder of you Maven
        project. Inside this folder, add a file named <code>web.xml</code>:
      </p>

      <div class="app-source" data-source-code="web.xml" annotate="code-annotations" ></div>

      <p>
        Now you can perform the first build. Select the <code>pom.xml</code> in the Package Explorer, perform a Right
        Click and select <code>Run AS / Maven Install</code>
      </p>

    </div>
  </div>
</section>

<section id="setup/application-context">
  <h3>Add a Spring application context XML configuration file</h3>
  <div class="row">
    <div class="col-md-12">
      <p>
        Next, we add a Spring ApplicationContext XML file to the same <code>src/main/webapp/WEB-INF</code> folder. The
        file must be named <code>applicationContext.xml</code>. We start with an empty file:
      </p>
      <div class="app-source" data-source-code="applicationContext.xml" annotate="code-annotations" ></div>
    </div>
  </div>
</section>

<h3>Setup complete!</h3>
<div class="row">
  <div class="col-xs-6 col-sm-6 col-md-3">
    <img id="project-layout-after-setup" data-img-thumb src="<%= @docUrl('assets/img/get-started/spring-framework/project-layout-after-setup.png') %>" />
  </div>
  <div class="col-xs-9 col-sm-9 col-md-9">
    <p>
      Congratulation, you have completed the project setup. Your project should now look as depicted in the screenshot
      on the left.
    </p>
    <p>
      You can now perform a full Maven build and deploy the project to a vanilla Apache Tomcat server. You should see
      the following log output:
    </p>
    <pre class="console">
28.04.2013 15:11:02 org.apache.catalina.startup.HostConfig deployWAR
INFO: Deploying web application archive C:\demo\apache-tomcat-7.0.39\webapps\loanapproval-spring-0.0.1-SNAPSHOT.war
28.04.2013 15:11:03 org.springframework.web.context.ContextLoader initWebApplicationContext
INFO: Root WebApplicationContext: initialization started
28.04.2013 15:11:03 org.springframework.context.support.AbstractApplicationContext prepareRefresh
INFO: Refreshing Root WebApplicationContext: startup date [Sun Apr 28 15:11:03 CEST 2013]; root of context hierarchy
28.04.2013 15:11:03 org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions
INFO: Loading XML bean definitions from ServletContext resource [/WEB-INF/applicationContext.xml]
28.04.2013 15:11:03 org.springframework.beans.factory.support.DefaultListableBeanFactory preInstantiateSingletons
INFO: Pre-instantiating singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@1a8dfb3: defining beans []; root of factory hierarchy
28.04.2013 15:11:03 org.springframework.web.context.ContextLoader initWebApplicationContext
INFO: Root WebApplicationContext: initialization completed in 170 ms
    </pre>
    <p>
      This means that you have setup your Spring web application correctly.
    </p>
  </div>
</div>

<%- @partial('get-tag.html.eco', @, {repo: "camunda-get-started-spring", tag: "Step-1"}) %>

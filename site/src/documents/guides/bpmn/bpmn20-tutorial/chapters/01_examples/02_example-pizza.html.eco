---
title: 'Pizza Collaboration'
category: 'Examples'
---

<p>
  This example is about Business-To-Business-Collaboration. Because we want to model the interaction between a pizza
  customer and the vendor  explicitly, we have classified them as "participants", therefore providing them with
  dedicated pools:
</p>
<div class="label label-warning">Hover over orange symbols for explanation</div>
<div id="pizza" data-bpmn-diagram="tutorial/examples/pizza">
  <div class="tutPop" data-placement="right" id="StartEvent_1" title="Start Event"
       data-content="If we step through the diagram, we should start with the pizza customer, who has noticed her
       stomach growling. The customer therefore selects a pizza and orders it. ">
  </div>
  <div class="tutPop" data-placement="bottom" id="EventBasedGateway_1" title="Event-based Gateway"
       data-content="The customer waits for the pizza to be delivered. The event-based gateway indicates that the
       customer actually waits for two different events that could happen next: Either the pizza is delivered, as
       indicated with the following message event, or there is no delivery for 60 minutes, i.e., after one hour the
       customer skips waiting and calls the vendor, asking for the pizza. We now assume that the clerk promises the
       pizza to be delivered soon, and the customers waits for the pizza again, asking again after the next 60 minutes,
       and so on. ">
  </div>
  <div class="tutPop" data-placement="auto right" id="StartEvent_2" title="Start Event"
       data-content="Let's have a closer look at the vendor process now. It is triggered by the order of the customer,
       as shown with the message start event and the message flow going from 'order a pizza' to that event After baking
       the pizza, the delivery boy will deliver the pizza and receive the payment.">
  </div>
  <div class="tutPop" data-placement="bottom" id="IntermediateCatchEvent_1" title="Message Event"
       data-content="In this example, we use message events not only for informational objects, as the pizza order, but
       also for physical objects, like the pizza. We can do this, because those physical objects actually act as
       informational objects inherently: When the pizza arrives at the customer's door, she will recognize this arrival
       and therefore know that the pizza has arrived, which is exactly the purpose of the accordant message event in the
       customer's pool. Of course, we can only use the model in that way because this example is not meant to be
       executed by a process engine.">
  </div>
</div>
<p>
  Please note that there is no default semantics in this type of modeling, which means you can model collaboration
  diagrams to show the interaction between business partners, but also zoom into one company, modeling the interaction
  between different departments, teams or even single workers and software systems in collaboration diagrams. It is
  totally up to the purpose of the model and therefore a decision the modeler has to make, whether a collaboration
  diagram with different pools is useful, or whether one should stick to one pool with different lanes, as shown in
  the previous chapter.
</p>
<p>
  Here you can find lots of additional<a href="<%= @docUrl('bpmn/examples.html') %>#bpmn-examples"> practical BPMN examples and patterns</a>.
</p>
---

title: 'Two Step Escalation'
category: 'BPMN Examples'

---

<section class="row">
  <div class="col-md-9">
    <div class="placeholder"></div>
  </div>
</section>

<section class="row">
  <div class="col-md-12">
    <h3>Modeling Scenario</h3>
    <p>
      We will use the following example to illustrate how to model a two step escalation using BPMN 2.0. When we want a pizza, we order one. Sometimes the pizza delivery screws up and the delivery takes longer than 20 minutes. Then we complain to the delivery service. After that, we give them another 30 minutes to deliver the pizza. If they do not make it in time, we give up and cancel our order.
    </p>
  </div>
</section>

<section class="row">
  <div class="col-md-12">
	<h3>Solution 1: Two Event-Based Gateways</h3>
     <img src="https://editor.signavio.com/p/model/348648cc90c24b68adfcb8bd6cc01558/png?inline&authkey=8c57bff4cb4153acdbebb07dd378304477e23edfccd3cc29da7c3db6b0872d" alt="Two Event Based Gateways"/>
	 <h4>Advantages of this solution</h4>
	 This solution very explicitly shows how the two step escalation is performed. Timers are modeled separately, followed by their corresponding escalation activities.
	 <h4>Disadvantages of this solution</h4>
	 The event-based gateway is not an intuitive BPMN symbol of the BPMN standard, experience is required. <br/>
	 Using two event-based gateways makes the model larger and leads to a duplication of the "Pizza received" message event.
  </div>
</section>

<section class="row">
  <div class="col-md-12">
	<h3>Solution 2: Receive Task with timers attached</h3>
     <img src="https://editor.signavio.com/p/model/ac836e44fe7941259fc8e043abfc5dee/png?inline&authkey=577015e9466e2b9ba4d5ab372d542746a4bf57361632872aa1de741cf112bc1" alt="Receive Task with timers attached"/>
	 <h4>Advantages of this solution</h4>
	 This model is smaller than the first solution and probably the way most developers would solve the problem on the engine. Since we use a non-interrupting attached timer event, this solution is more flexible when it comes to multiple complaints (e.g., we want to complain every 5 minutes until 50 minutes are over). 
	 <h4>Disadvantages of this solution</h4>
	 The receive task is usually not intuitive for the "business guys", who would rather use message receive events for that kind of wait state. <br/>
	 The way that the interrupting and non-interrupting timer collaborate requires profound understanding of attached events.
  </div>
</section>

<section class="row">
  <div class="col-md-12">
	<h3>Solution 3: One Event-Based Gateway with a generic timer</h3>
     <img src="https://editor.signavio.com/p/model/81aca70330b945cd8dd7951d9b49fdfa/png?inline&authkey=e871aaa12253d7a841c64266f075efffdc8fe2e8dddcfed5e06b306a37a64a" alt="One Event-Based Gateway with a generic timer"/>
	 <h4>Advantages of this solution</h4>
	 This model is the compact and generic solution to the problem. If it comes to n-step escalation then you will need this generic approach to avoid huge diagrams.
	 <h4>Disadvantages of this solution</h4>
	 The generic solution is less explicit than the other solutions. We do not see the actual duration of the timers, as a single timer is used for both durations. <br/>
	 For a fast understanding of the two step escalation, this method of modeling is not suitable. 
  </div>
</section>

<section class="row">
  <div class="col-md-9">
    <div class="placeholder"></div>
  </div>
</section>